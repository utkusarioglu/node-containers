name: Build and push Docker images

on:
  push:
    branches:
      - main
    paths:
      - src/**
  workflow_dispatch:

env:
  CONTAINER_NAME: node-devcontainer
  CONTAINER_USERNAME: node
  CONTAINER_GROUP: 1000
  CACHE_TO_DEST: /tmp/.buildx-cache-new
  CACHE_FROM_SRC: /tmp/.buildx-cache

jobs:
  build-and-push-docker-images:
    name: Build Docker image and push to repositories
    runs-on: ubuntu-latest
    strategy:
      matrix:
        images:
          - baseImage: node:18-slim
            dockerfile: src/Dockerfile.dev
            containerTag: 18-slim.0.0
            additionalFilesToWatch: ""
            readmeFile: src/DOCKER_README.md
          - baseImage: node:17-slim
            dockerfile: src/Dockerfile.dev
            containerTag: 17-slim.0.0
            additionalFilesToWatch: ""
            readmeFile: src/DOCKER_README.md
          - baseImage: node:16-slim
            dockerfile: src/Dockerfile.dev
            containerTag: 16-slim.0.0
            additionalFilesToWatch: ""
            readmeFile: src/DOCKER_README.md

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v25
        with:
          files: |
            ${{ matrix.images.dockerfile }}
            ${{ matrix.images.readmeFile }}
            ${{ matrix.images.additionalFilesToWatch }}

      - name: Declare run state
        id: run-state
        run: |
          if [ \
            ${{ steps.changed-files.outputs.any_modified }} == true || \
            ${{ github.event_name }} == workflow_dispatch \
          ];
          then
            echo "::set-output name=run-docker-build::true"
            echo "::debug::Docker build will carry out as expected."
          else
            echo "::set-output name=run-docker-build::false"
            echo "::debug::Docker build is cancelled as none of the watched files changed."
          fi

      - name: Set up Docker Buildx
        if: steps.run-state.run-docker-build == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: steps.run-state.run-docker-build == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ${{ env.CONTAINER_NAME }}:${{ matrix.images.containerTag }}
        if: steps.run-state.run-docker-build == 'true'
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}:${{ matrix.images.containerTag }}
          file: ${{ matrix.images.dockerfile }}
          push: ${{ github.ref == 'refs/heads/main' }}
          cache-from: type=local,src=${{ env.CACHE_FROM_SRC }}
          cache-to: type=local,mode=max,dest=${{ env.CACHE_TO_DEST }}
          build-args: |
            BASE_IMAGE=${{ matrix.images.baseImage }}
            ROOT_PASS=${{ secrets.DOCKER_IMAGE_ROOT_PASS }}
            USERNAME=${{ env.CONTAINER_USERNAME }}
            GROUP=${{ env.CONTAINER_GROUP }}

      - name: Image digest
        if: steps.run-state.run-docker-build == 'true'
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Set Docker Hub description
        if: steps.run-state.run-docker-build == 'true'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}
          short-description: NodeJS devcontainers
          readme-filepath: ${{ matrix.images.readmeFile }}

      - name: Move cache
        run: |
          rm -rf ${{ env.CACHE_FROM_SRC }}
          if [ -d ${{ env.CACHE_FROM_SRC }} ];
          then
            mv ${{ env.CACHE_TO_DEST }} ${{ env.CACHE_FROM_SRC }}
          fi
