name: build-and-push

on:
  push:
    # branches:
    #   - feature/*
    tags:
      - "*"
    paths:
      - src/**
      - .github/workflows/build-and-push.yml
  workflow_dispatch:

env:
  CONTAINER_NAME: node-devcontainer
  CONTAINER_USERNAME: node
  CONTAINER_GROUP: 1000
  CACHE_TO_DEST: /tmp/.buildx-cache-new
  CACHE_FROM_SRC: /tmp/.buildx-cache

jobs:
  build-and-push:
    name: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        images:
          - imageTag: 18-slim
            dockerfile: src/Dockerfile.dev
            additionalFilesToWatch: ""
            readmeFile: src/DOCKER_README.md
          - imageTag: 17-slim
            dockerfile: src/Dockerfile.dev
            additionalFilesToWatch: ""
            readmeFile: src/DOCKER_README.md
          - imageTag: 16-slim
            dockerfile: src/Dockerfile.dev
            additionalFilesToWatch: ""
            readmeFile: src/DOCKER_README.md

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v25
        with:
          files: |
            ${{ matrix.images.dockerfile }}
            ${{ matrix.images.readmeFile }}
            ${{ matrix.images.additionalFilesToWatch }}
            .github/workflows/build-and-push.yml

      - name: Get latest tag
        id: latest_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: tag-unavailable

      - name: Declare run state
        id: run_state
        run: |
          if [ ${{ steps.changed_files.outputs.any_modified }} == true ] || \
            [ ${{ github.event_name }} == workflow_dispatch ] || \
            [ ${{ steps.latest_tag.outputs.tag }} != tag-unavailable ];
          then
            echo "::set-output name=run_docker_build::true"
            echo "::debug::Docker build will carry out as expected."
          else
            echo "::set-output name=run_docker_build::false"
            echo "Docker build is cancelled as the required conditions for a run haven't been met"
          fi

      - name: Create variables
        id: variables
        run: |
          image_name=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}
          image_tag=${{ matrix.images.imageTag }}.${{ steps.latest_tag.outputs.tag }}
          dev_image_tag="${image_tag}-dev"
          image_ref="${image_name}:${image_tag}"
          short_image_ref="${{ env.CONTAINER_NAME }}:${image_tag}"
          dev_image_ref="$image_name:$dev_image_tag"
          short_dev_image_ref="${{ env.CONTAINER_NAME }}:$dev_image_tag"

          echo "::set-output name=image-name::$image_name"

          echo "::set-output name=image-tag::$image_tag"
          echo "::set-output name=dev-image-tag::$dev_image_tag"

          echo "::set-output name=image-ref::$image_ref"
          echo "::set-output name=short-image-ref::$short_image_ref"

          echo "::set-output name=dev-image-ref::$dev_image_ref"
          echo "::set-output name=short-dev-image-ref::$short_dev_image_ref"

      - name: Set up Docker Buildx
        if: steps.run_state.outputs.run_docker_build == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: steps.run_state.outputs.run_docker_build == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build ${{ steps.variables.outputs.short-image-ref }}
        if: steps.run_state.outputs.run_docker_build == 'true'
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          tags: ${{ steps.variables.outputs.image-ref }}
          file: ${{ matrix.images.dockerfile }}
          push: true
          pull: false
          cache-from: type=local,src=${{ env.CACHE_FROM_SRC }}
          cache-to: type=local,mode=max,dest=${{ env.CACHE_TO_DEST }}
          build-args: |
            IMAGE_TAG=${{ matrix.images.imageTag }}
            ROOT_PASS=${{ secrets.DOCKER_IMAGE_ROOT_PASS }}
            USERNAME=${{ env.CONTAINER_USERNAME }}
            GROUP=${{ env.CONTAINER_GROUP }}

      - name: Build devcontainer ${{ steps.variables.outputs.short-dev-image-ref }}
        if: steps.run_state.outputs.run_docker_build == 'true'
        id: devcontainer_build
        uses: devcontainers/ci@v0.2
        env:
          IMAGE_NAME: ${{ steps.variables.outputs.image-name }}
          IMAGE_TAG: ${{ steps.variables.outputs.image-tag }}
        with:
          imageName: ${{ steps.variables.outputs.image-name }}
          imageTag: ${{ steps.variables.outputs.image-tag }}
          subFolder: src
          runCmd: |-
            gh --version
            node --version
            node <<EOF
            console.log("Node runs as expected");
            EOF

      - name: Push devcontainer ${{ steps.variables.outputs.short-dev-image-ref }}
        if: steps.run_state.outputs.run_docker_build == 'true'
        run: docker push ${{ steps.variables.outputs.image-ref }}

      - name: Set Docker Hub description
        if: steps.run_state.outputs.run_docker_build == 'true'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ steps.variables.outputs.image-name }}
          short-description: NodeJS devcontainers
          readme-filepath: ${{ matrix.images.readmeFile }}

      - name: Move cache
        run: |
          rm -rf ${{ env.CACHE_FROM_SRC }}
          if [ -d ${{ env.CACHE_FROM_SRC }} ];
          then
            mv ${{ env.CACHE_TO_DEST }} ${{ env.CACHE_FROM_SRC }}
          fi

      - name: Telegram notifications
        if: always()
        uses: utkusarioglu/telegram-notifications@main
        with:
          telegram_id: ${{ secrets.TELEGRAM_ID }}
          telegram_token: ${{ secrets.TELEGRAM_TOKEN }}
          job_status: ${{ job.status }}
          github_context: ${{ toJson(github) }}
